import dotenv from 'dotenv';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';
import bcrypt from 'bcrypt';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Cargar variables de entorno
dotenv.config({ path: '.env' });

async function initializeSQLiteDatabase() {
  console.log('üöÄ INICIALIZANDO BASE DE DATOS SQLITE LOCAL');
  console.log('==========================================\n');
  
  let db;
  
  try {
    // Crear/abrir base de datos SQLite
    const dbPath = path.join(process.cwd(), 'database', 'asistencia_local.db');
    
    // Crear directorio si no existe
    const fs = await import('fs');
    const dbDir = path.dirname(dbPath);
    if (!fs.existsSync(dbDir)) {
      fs.mkdirSync(dbDir, { recursive: true });
    }
    
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database
    });
    
    console.log('‚úÖ Base de datos SQLite creada en:', dbPath);
    
    // Habilitar foreign keys
    await db.exec('PRAGMA foreign_keys = ON');
    
    // Crear tablas
    console.log('\nüìã Creando estructura de tablas...');
    
    // Tabla de roles
    await db.exec(`
      CREATE TABLE IF NOT EXISTS roles (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nombre VARCHAR(50) NOT NULL UNIQUE,
        descripcion TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Insertar roles b√°sicos
    await db.exec(`
      INSERT OR IGNORE INTO roles (id, nombre, descripcion) VALUES 
      (1, 'USUARIO', 'Usuario b√°sico del sistema'),
      (2, 'ADMINISTRADOR', 'Administrador con acceso total'),
      (3, 'COORDINADOR', 'Coordinador con acceso limitado por subalmac√©n')
    `);
    
    // Tabla de almacenes
    await db.exec(`
      CREATE TABLE IF NOT EXISTS almacenes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nombre VARCHAR(100) NOT NULL,
        descripcion TEXT,
        activo BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    
    // Insertar almacenes de ejemplo
    await db.exec(`
      INSERT OR IGNORE INTO almacenes (nombre, descripcion) VALUES 
      ('Almac√©n Central', 'Almac√©n principal de la empresa'),
      ('Almac√©n Norte', 'Almac√©n ubicado en la zona norte'),
      ('Almac√©n Sur', 'Almac√©n ubicado en la zona sur')
    `);
    
    // Tabla de subalmacenes
    await db.exec(`
      CREATE TABLE IF NOT EXISTS subalmacenes (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nombre VARCHAR(100) NOT NULL,
        almacen_id INTEGER NOT NULL,
        descripcion TEXT,
        refrigerio TIME,
        jornada VARCHAR(50),
        activo BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (almacen_id) REFERENCES almacenes(id) ON DELETE CASCADE
      )
    `);
    
    // Insertar subalmacenes de ejemplo
    await db.exec(`
      INSERT OR IGNORE INTO subalmacenes (nombre, almacen_id, descripcion) VALUES 
      ('Subalmac√©n A1', 1, 'Primer subalmac√©n del almac√©n central'),
      ('Subalmac√©n A2', 1, 'Segundo subalmac√©n del almac√©n central'),
      ('Subalmac√©n B1', 2, 'Primer subalmac√©n del almac√©n norte'),
      ('Subalmac√©n C1', 3, 'Primer subalmac√©n del almac√©n sur')
    `);
    
    // Tabla de usuarios
    await db.exec(`
      CREATE TABLE IF NOT EXISTS usuarios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nombre VARCHAR(100) NOT NULL,
        correo VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL,
        rol_id INTEGER NOT NULL,
        activo BOOLEAN DEFAULT 1,
        ya_ingreso BOOLEAN DEFAULT 0,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (rol_id) REFERENCES roles(id)
      )
    `);
    
    // Tabla de trabajadores
    await db.exec(`
      CREATE TABLE IF NOT EXISTS trabajadores (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nombre VARCHAR(100) NOT NULL,
        dni VARCHAR(8) UNIQUE NOT NULL,
        subalmacen_id INTEGER NOT NULL,
        coordinador_id INTEGER,
        horas_objetivo INTEGER DEFAULT 0,
        activo BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (subalmacen_id) REFERENCES subalmacenes(id),
        FOREIGN KEY (coordinador_id) REFERENCES usuarios(id)
      )
    `);
    
    // Tabla de programaci√≥n de fechas
    await db.exec(`
      CREATE TABLE IF NOT EXISTS programacion_fechas (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        fecha DATE NOT NULL,
        subalmacen_id INTEGER NOT NULL,
        activo BOOLEAN DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(fecha, subalmacen_id),
        FOREIGN KEY (subalmacen_id) REFERENCES subalmacenes(id) ON DELETE CASCADE
      )
    `);
    
    // Tabla de asistencias
    await db.exec(`
      CREATE TABLE IF NOT EXISTS asistencias (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        trabajador_id INTEGER NOT NULL,
        subalmacen_id INTEGER NOT NULL,
        hora_entrada TIME,
        hora_salida TIME,
        justificacion TEXT,
        registrado_por INTEGER NOT NULL,
        programacion_fecha_id INTEGER NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(trabajador_id, programacion_fecha_id),
        FOREIGN KEY (trabajador_id) REFERENCES trabajadores(id),
        FOREIGN KEY (subalmacen_id) REFERENCES subalmacenes(id),
        FOREIGN KEY (registrado_por) REFERENCES usuarios(id),
        FOREIGN KEY (programacion_fecha_id) REFERENCES programacion_fechas(id) ON DELETE CASCADE
      )
    `);
    
    // Tabla de permisos de acceso
    await db.exec(`
      CREATE TABLE IF NOT EXISTS usuario_subalmacen_acceso (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        usuario_id INTEGER NOT NULL,
        subalmacen_id INTEGER NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(usuario_id, subalmacen_id),
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE,
        FOREIGN KEY (subalmacen_id) REFERENCES subalmacenes(id) ON DELETE CASCADE
      )
    `);
    
    // Tabla para contrase√±as originales
    await db.exec(`
      CREATE TABLE IF NOT EXISTS passwords_admin (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        usuario_id INTEGER NOT NULL,
        password_original VARCHAR(255) NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(usuario_id),
        FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
      )
    `);
    
    console.log('‚úÖ Estructura de tablas creada');
    
    // Crear usuarios de prueba
    const usuarios = [
      {
        nombre: 'Administrador Sistema',
        correo: 'admin@brayamsac.com',
        password: '123456',
        rol_id: 2
      },
      {
        nombre: 'Coordinador Test',
        correo: 'coordinador@brayamsac.com',
        password: '123456',
        rol_id: 3
      },
      {
        nombre: 'Usuario Test',
        correo: 'usuario@brayamsac.com',
        password: '123456',
        rol_id: 1
      }
    ];
    
    console.log('\nüë• Creando usuarios de prueba...');
    
    for (const usuario of usuarios) {
      const hashedPassword = await bcrypt.hash(usuario.password, 12);
      
      try {
        const result = await db.run(
          'INSERT OR IGNORE INTO usuarios (nombre, correo, password, rol_id, activo) VALUES (?, ?, ?, ?, 1)',
          [usuario.nombre, usuario.correo, hashedPassword, usuario.rol_id]
        );
        
        if (result.changes > 0) {
          // Guardar contrase√±a original para admin
          await db.run(
            'INSERT OR IGNORE INTO passwords_admin (usuario_id, password_original) VALUES (?, ?)',
            [result.lastID, usuario.password]
          );
          
          console.log(`‚úÖ Usuario creado: ${usuario.correo} (${usuario.password})`);
        } else {
          console.log(`‚ö†Ô∏è Usuario ya existe: ${usuario.correo}`);
        }
      } catch (err) {
        console.log(`‚ùå Error creando usuario ${usuario.correo}:`, err.message);
      }
    }
    
    // Crear trabajadores de ejemplo
    console.log('\nüë∑ Creando trabajadores de ejemplo...');
    
    const trabajadores = [
      { nombre: 'Juan P√©rez', dni: '12345678', subalmacen_id: 1 },
      { nombre: 'Mar√≠a Garc√≠a', dni: '87654321', subalmacen_id: 1 },
      { nombre: 'Carlos L√≥pez', dni: '11223344', subalmacen_id: 2 },
      { nombre: 'Ana Mart√≠nez', dni: '44332211', subalmacen_id: 2 },
      { nombre: 'Luis Rodr√≠guez', dni: '55667788', subalmacen_id: 3 },
      { nombre: 'Carmen S√°nchez', dni: '88776655', subalmacen_id: 4 }
    ];
    
    for (const trabajador of trabajadores) {
      try {
        const result = await db.run(
          'INSERT OR IGNORE INTO trabajadores (nombre, dni, subalmacen_id, activo) VALUES (?, ?, ?, 1)',
          [trabajador.nombre, trabajador.dni, trabajador.subalmacen_id]
        );
        
        if (result.changes > 0) {
          console.log(`‚úÖ Trabajador creado: ${trabajador.nombre} (${trabajador.dni})`);
        } else {
          console.log(`‚ö†Ô∏è Trabajador ya existe: ${trabajador.dni}`);
        }
      } catch (err) {
        console.log(`‚ùå Error creando trabajador ${trabajador.dni}:`, err.message);
      }
    }
    
    // Asignar acceso de coordinador
    console.log('\nüîë Asignando permisos de acceso...');
    
    try {
      const coordinador = await db.get(
        'SELECT id FROM usuarios WHERE correo = ?',
        ['coordinador@brayamsac.com']
      );
      
      if (coordinador) {
        const accesos = [1, 2]; // Subalmacenes 1 y 2
        
        for (const subalmacenId of accesos) {
          const result = await db.run(
            'INSERT OR IGNORE INTO usuario_subalmacen_acceso (usuario_id, subalmacen_id) VALUES (?, ?)',
            [coordinador.id, subalmacenId]
          );
          
          if (result.changes > 0) {
            console.log(`‚úÖ Acceso asignado: Coordinador -> Subalmac√©n ${subalmacenId}`);
          } else {
            console.log(`‚ö†Ô∏è Acceso ya existe: Coordinador -> Subalmac√©n ${subalmacenId}`);
          }
        }
      }
    } catch (err) {
      console.log('‚ö†Ô∏è Error asignando permisos:', err.message);
    }
    
    console.log('\nüéâ BASE DE DATOS SQLITE LOCAL INICIALIZADA CORRECTAMENTE!');
    console.log('\nüìã CREDENCIALES DE ACCESO:');
    console.log('================================');
    console.log('üë§ Administrador:');
    console.log('   Email: admin@brayamsac.com');
    console.log('   Password: 123456');
    console.log('\nüë§ Coordinador:');
    console.log('   Email: coordinador@brayamsac.com');
    console.log('   Password: 123456');
    console.log('\nüë§ Usuario:');
    console.log('   Email: usuario@brayamsac.com');
    console.log('   Password: 123456');
    console.log('\nüîß CONFIGURACI√ìN:');
    console.log('================================');
    console.log('Base de datos: SQLite');
    console.log('Archivo:', dbPath);
    console.log('\n‚ö†Ô∏è IMPORTANTE: Para usar SQLite, instala la dependencia:');
    console.log('npm install sqlite3 sqlite');
    console.log('\nY actualiza tu configuraci√≥n de base de datos en el c√≥digo.');
    
  } catch (error) {
    console.error('‚ùå Error inicializando base de datos SQLite:', error.message);
    console.error('\nüí° Aseg√∫rate de que:');
    console.error('1. Tienes permisos de escritura en el directorio');
    console.error('2. SQLite3 est√° instalado: npm install sqlite3 sqlite');
  } finally {
    if (db) {
      await db.close();
    }
  }
}

initializeSQLiteDatabase();